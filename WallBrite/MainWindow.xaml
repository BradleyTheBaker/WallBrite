<Window x:Class="WallBrite.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:WallBrite"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="1200"
        WindowStartupLocation="CenterScreen" WindowState="Maximized">
    <DockPanel x:Name="MainPanel">
        <Expander ExpandDirection="Right" IsExpanded="True">
            <StackPanel x:Name="SidePanel" DockPanel.Dock="Left" Background="GhostWhite" Width="105" Margin="0 0 5 0">
                <StackPanel.Resources>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Margin" Value="0, 2" />
                    </Style>
                </StackPanel.Resources>
                <TextBlock FontWeight="Bold" FontSize="14" TextWrapping="WrapWithOverflow" TextAlignment="Center" Margin="0 5">Library Controls</TextBlock>

                <StackPanel>
                    <Button Command="{Binding AddFilesCommand}">Add Files</Button>
                    <Button Command="{Binding AddFolderCommand}">Add Folder</Button>
                </StackPanel>

                <StackPanel Margin="0 5">
                    <TextBlock>Sort By:</TextBlock>
                    <ComboBox x:Name="SortTypeBox" SelectionChanged="SortTypeChanged" SelectedValuePath="Content" SelectedIndex="1">
                        <ComboBoxItem>Brightness</ComboBoxItem>
                        <ComboBoxItem>Date Added</ComboBoxItem>
                        <ComboBoxItem>Enabled</ComboBoxItem>
                    </ComboBox>
                    <TextBlock>Sort Direction:</TextBlock>
                    <ComboBox x:Name="SortDirectionBox" SelectionChanged="SortDirectionChanged" SelectedValuePath="Content" SelectedIndex="1">
                        <ComboBoxItem>Descending</ComboBoxItem>
                        <ComboBoxItem>Ascending</ComboBoxItem>
                    </ComboBox>
                </StackPanel>
                <StackPanel Margin="0 10">
                    <StackPanel.Resources>
                        <Style TargetType="Button">
                            <Setter Property="Margin" Value="0 2" />
                            <Style.Triggers>
                                <DataTrigger
                                        Binding ="{Binding ElementName=imageGrid, Path=SelectedItems.Count}"
                                        Value="0">
                                    <Setter Property="Button.IsEnabled" Value="false" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock TextAlignment="Center" FontWeight="Medium">Selection:</TextBlock>
                    <Button x:Name="EnableButton" Command="{Binding EnableCommand}" CommandParameter="{Binding ElementName=imageGrid, Path=SelectedItems}">Enable</Button>
                    <Button x:Name="DisableButton" Command="{Binding DisableCommand}" CommandParameter="{Binding ElementName=imageGrid, Path=SelectedItems}">Disable</Button>
                    <Button x:Name="RemoveButton" Command="{Binding RemoveCommand}" CommandParameter="{Binding ElementName=imageGrid, Path=SelectedItems}">
                        <TextBlock TextWrapping="Wrap" TextAlignment="Center">Remove from Library</TextBlock>
                    </Button>
                </StackPanel>
            </StackPanel>
        </Expander>
        <Expander DockPanel.Dock="Bottom" Header="Automation Settings">
            <Expander.Resources>
                <local:PercentConverter x:Key="PercentConverter" />
            </Expander.Resources>
            <StackPanel x:Name="BottomPanel"  Background="GhostWhite">
                <Grid HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Border Grid.Column="0" BorderThickness="0 0 1 0" BorderBrush="Black">
                        <Grid>
                            <TextBlock HorizontalAlignment="Center" FontWeight="Medium" VerticalAlignment="Top" Margin="0 5 0 0">Update Settings</TextBlock>
                            <StackPanel VerticalAlignment="Bottom" Margin="10 0 10 5">
                            <StackPanel Orientation="Horizontal" Margin="0 0 0 5" HorizontalAlignment="Center">
                                <StackPanel.ToolTip>
                                    <TextBlock Width="300" TextWrapping="Wrap">
                                    This sets the time between each "check" for a wallpaper change. Each time this happens,
                                    WallBrite will check whether the time of day has changed sufficiently to match the brightness of a different
                                    image from the one currently set as the wallpaper.
                                    </TextBlock>
                                </StackPanel.ToolTip>
                                <StackPanel.Resources>
                                    <local:CutoffConverter x:Key="HoursConverter" Cutoff="0" />
                                </StackPanel.Resources>
                                <TextBlock Margin="0 0 5 0" VerticalAlignment="Center">Check for change every:</TextBlock>
                                <xctk:IntegerUpDown x:Name="updateHours" Maximum="23" Minimum="0" Value="{Binding UpdateIntervalHours}"></xctk:IntegerUpDown>
                                <TextBlock Margin="2 0 5 0" VerticalAlignment="Center">hrs</TextBlock>
                                <xctk:IntegerUpDown x:Name="updateMins" Value="{Binding UpdateIntervalMins}">
                                    <xctk:IntegerUpDown.Style>
                                        <Style TargetType="{x:Type xctk:IntegerUpDown}">
                                            <Setter Property="Minimum" Value="1" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ElementName=updateHours, Path=Value, Converter={StaticResource HoursConverter}}" Value="true">
                                                    <Setter Property="Minimum" Value="0" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ElementName=updateHours, Path=Value, Converter={StaticResource HoursConverter}}" Value="false">
                                                    <Setter Property="Minimum" Value="1" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </xctk:IntegerUpDown.Style>
                                </xctk:IntegerUpDown>
                                <TextBlock Margin="2 0 0 0" VerticalAlignment="Center">mins</TextBlock>
                            </StackPanel>
                            <Grid Width="{Binding ElementName=checkNowButton, Path=ActualWidth}" HorizontalAlignment="Left">
                                <Grid.ToolTip>
                                    <TextBlock Width="300" TextWrapping="Wrap">
                                    This is the time until the wallpaper will change using the current library and automation settings. If this is too long, try having WallBrite check more often or add more
                                    wallpapers to the library with more varied brightness levels.
                                    </TextBlock>
                                </Grid.ToolTip>
                                <ProgressBar VerticalAlignment="Bottom" Height="25" Grid.Column="1" Minimum="0" Maximum="100" Value="{Binding Path=Progress, Converter={StaticResource PercentConverter}}" x:Name="timeProgress"></ProgressBar>
                                <TextBlock Text="{Binding ProgressReport}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                            <Button x:Name="checkNowButton" Margin="0 5 0 0" Command="{Binding UpdateCommand}">
                                Check for change now
                                <Button.ToolTip>
                                    <TextBlock Width="300" TextWrapping="Wrap">
                                    Check for a wallpaper change now. If the time of day has changed significantly since the last check and there is a wallpaper
                                    in the library better matching the current time of day than the currently set wallpaper, the wallpaper will change.
                                    </TextBlock>
                                </Button.ToolTip>
                            </Button>
                        </StackPanel>
                        </Grid>
                    </Border>
                    <Border Grid.Column="1" BorderThickness="0 0 1 0" BorderBrush="Black">
                        <Grid Margin="0 0 0 5">
                            <TextBlock HorizontalAlignment="Center" FontWeight="Medium" VerticalAlignment="Top" Margin="0 5 0 0">Time of Day Settings</TextBlock>
                            <StackPanel VerticalAlignment="Bottom">
                                <Grid Width="265" HorizontalAlignment="Center" Margin="5 0 5 5">
                                    <ProgressBar Height="25" Grid.Column="1" Minimum="0" Maximum="1" Value="{Binding CurrentDaylight}"></ProgressBar>
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="Current Daylight: {0}%">
                                                <Binding Path="CurrentDaylight" Converter="{StaticResource PercentConverter}" />
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </Grid>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <StackPanel Margin="0 0 20 0">
                                        <TextBlock Margin="0 3">Brightest Time of Day</TextBlock>
                                        <xctk:TimePicker x:Name="brightestPicker" Value="{Binding BrightestTime}" Width="122" HorizontalAlignment="Left"></xctk:TimePicker>
                                    </StackPanel>
                                    <StackPanel>
                                        <TextBlock Margin="0 3">Darkest Time of Day</TextBlock>
                                        <xctk:TimePicker x:Name="darkestPicker" Value="{Binding DarkestTime}" Width="122" HorizontalAlignment="Left"></xctk:TimePicker>
                                    </StackPanel>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <Grid Grid.Column="2" Margin="10 0 0 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock HorizontalAlignment="Center" FontWeight="Medium" Margin="0 5" VerticalAlignment="Top">Current Wallpaper</TextBlock>
                        <StackPanel Grid.Row="1" VerticalAlignment="Bottom" Margin="0 0 0 5">
                            <Border HorizontalAlignment="Center" Padding="0 20" MaxWidth="200" BorderBrush="Black" BorderThickness="1" Background="{Binding CurrentWallBack}">
                                <Image HorizontalAlignment="Center" MaxHeight="100" Source="{Binding CurrentWallThumb}"></Image>
                            </Border>
                            <StackPanel Grid.Column="1" VerticalAlignment="Bottom">
                                <Grid Width="160" Margin="0 5 0 0">
                                    <ProgressBar Height="25" Grid.Column="1" Minimum="0" Maximum="1" Value="{Binding CurrentWallBrightness}"></ProgressBar>
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="Wallpaper Brightness: {0}%">
                                                <Binding Path="CurrentWallBrightness" Converter="{StaticResource PercentConverter}" />
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </Grid>
                                <TextBlock Width="160" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Margin="0 5 0 0">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="Filename: {0}">
                                            <Binding Path="CurrentWallFileName"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </Grid>
            </StackPanel>
        </Expander>
        <ListView x:Name="imageGrid" ItemsSource="{Binding}" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
            <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </ListView.ItemsPanel>
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListView.ItemContainerStyle>
            <ListView.DataContext>
                <CollectionViewSource Source="{Binding LibraryList}">
                    <CollectionViewSource.SortDescriptions>
                    </CollectionViewSource.SortDescriptions>
                </CollectionViewSource>
            </ListView.DataContext>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Border x:Name="imageBorder" BorderBrush="Black" BorderThickness="1" Margin="5" Background="{Binding BackgroundColor}">
                        <Grid>
                            <Image Panel.ZIndex="0" Width="200" Height="200" Source="{Binding Thumbnail}"/>
                            <TextBlock Panel.ZIndex="1" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Medium" FontSize="40">
                                <TextBlock.Resources>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Opacity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="0.5">
                                                <Setter Property="Text" Value="Disabled"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Resources>
                            </TextBlock>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </DockPanel>
</Window>